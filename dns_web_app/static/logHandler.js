const descriptions = {
    client: "Le client initie la r√©solution DNSSEC en envoyant une requ√™te au r√©solveur. Il attend une r√©ponse v√©rifi√©e avec des signatures DNSSEC.",
    resolveur: "Le r√©solveur interroge les serveurs DNS hi√©rarchiquement, v√©rifie les signatures √† chaque √©tape, et retourne une r√©ponse s√©curis√©e au client.",
    root: "Ce serveur simule un serveur racine DNS capable de signer les r√©ponses avec une signature DNSSEC. Il extrait le TLD d‚Äôun domaine, fournit l‚Äôadresse IP du serveur TLD correspondant, puis signe cette information.",
    tld: "Le serveur TLD fournit l‚Äôadresse du serveur autoritaire correspondant √† un domaine de second niveau, et signe cette information.",
    autoritaire: "Ce serveur d√©tient les enregistrements finaux du domaine (comme les A records) et les signe pour garantir leur authenticit√©."
};

function extractBaseKey(value) {
    return value.split('.')[0];
}

function loadLog() {
    const selector = document.getElementById("log-selector");
    const component = selector.value;
    const logDisplay = document.getElementById("logContent");
    const descBox = document.getElementById("componentDesc");

    if (!component) {
        logDisplay.textContent = "üïì En attente d'une s√©lection...";
        descBox.innerHTML = "";
        return;
    }

    const key = extractBaseKey(component);
    descBox.innerHTML = `
        <div class="info-box">
            <strong>${key.charAt(0).toUpperCase() + key.slice(1)} :</strong><br>
            ${descriptions[key] || "Description indisponible pour ce composant."}
        </div>
    `;
}

function getComponent() {
    return document.getElementById("log-selector").value;
}

function afficherLog() {
    const comp = getComponent();
    const display = document.getElementById("logContent");
    if (!comp) {
        display.textContent = "‚ö†Ô∏è Aucune s√©lection.";
        return;
    }
    fetch(`/logs/${comp}`)
        .then(res => {
            if (!res.ok) throw new Error("Erreur lors de la r√©cup√©ration des logs.");
            return res.text();
        })
        .then(data => {
            display.textContent = data || "‚ö†Ô∏è Aucun contenu √† afficher.";
            display.scrollTop = display.scrollHeight;
        })
        .catch(err => {
            display.textContent = `‚ùå ${err.message}`;
        });
}

function telechargerLog() {
    const comp = getComponent();
    if (comp) {
        window.location.href = `/logs/${comp}/download`;
    }
}

function viderTousLesLogs() {
    if (confirm("‚ö†Ô∏è Es-tu s√ªr de vouloir vider tous les logs ?")) {
        fetch('/logs/clear_all', { method: 'POST' })
            .then(res => res.text())
            .then(msg => alert(msg))
            .catch(err => alert("‚ùå " + err.message));
    }
}
